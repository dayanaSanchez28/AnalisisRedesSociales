/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analisisredessociales.interfaz;

import analisisredessociales.dominio.Usuario;
import analisisredessociales.estructuras.RedSocial;
import javax.swing.JOptionPane;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swing_viewer.SwingViewer;
import org.graphstream.ui.swing_viewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.ViewerListener;
import org.graphstream.ui.view.ViewerPipe;

/**
 *
 * @author Dayana
 */
public class VistaGrafo extends javax.swing.JFrame implements ViewerListener {
    private final RedSocial redSocial;
    private Graph grafo;
    private boolean loop = true;
    private Usuario usuarioSeleccionado;
    /**
     * Creates new form VistaGrafo
     * @param redSocial
     */
    public VistaGrafo(RedSocial redSocial) {
        this.redSocial = redSocial;
        initComponents();
        // construimos grafo visual a partir de la red social
        grafo = crearGrafoUI();
        // embeber grafo en el panel destinado para ello
        SwingViewer swingViewer = new SwingViewer(grafo, Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
        swingViewer.enableAutoLayout();
        ViewPanel view = (ViewPanel) swingViewer.addDefaultView(false);
        view.enableMouseOptions();
        pnlGrafo.add(view);
        
        // Empezar a escuchar eventos
        ViewerPipe pipe = swingViewer.newViewerPipe();
        pipe.addViewerListener(this);
        pipe.addSink(grafo);
        Thread t = new Thread(() -> {
            while (loop) {
                pipe.pump();
            }
        });
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dialogoCreacion = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        txtIdNuevoUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombreNuevoUsuario = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtRelacionesNuevoUsuario = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        pnlGrafo = new javax.swing.JPanel();
        pnlOpciones = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombreUsuario = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 15), new java.awt.Dimension(0, 15), new java.awt.Dimension(32767, 15));
        jLabel2 = new javax.swing.JLabel();
        txtIdUsuario = new javax.swing.JTextField();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 15), new java.awt.Dimension(0, 15), new java.awt.Dimension(32767, 20));
        botonNuevo = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();

        dialogoCreacion.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialogoCreacion.setTitle("Añadir usuario");
        dialogoCreacion.setSize(new java.awt.Dimension(600, 400));
        dialogoCreacion.getContentPane().setLayout(new java.awt.GridLayout(4, 2));

        jLabel4.setText("ID:");
        dialogoCreacion.getContentPane().add(jLabel4);
        dialogoCreacion.getContentPane().add(txtIdNuevoUsuario);

        jLabel3.setText("Nombre usuario: @");
        dialogoCreacion.getContentPane().add(jLabel3);
        dialogoCreacion.getContentPane().add(txtNombreNuevoUsuario);

        jLabel5.setText("<html>Relaciones<br><i>(Escriba el ID y luego de 2 puntos, el tiempo de relación, separe múltiples relaciones con comas. <br>Ej: 121:5,122:4)</i></html>");
        dialogoCreacion.getContentPane().add(jLabel5);
        dialogoCreacion.getContentPane().add(txtRelacionesNuevoUsuario);

        btnGuardar.setText("Crear");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        dialogoCreacion.getContentPane().add(btnGuardar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Grafo Visualizado");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnlGrafo.setBackground(new java.awt.Color(255, 255, 255));
        pnlGrafo.setPreferredSize(new java.awt.Dimension(400, 400));
        pnlGrafo.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlGrafo, gridBagConstraints);

        pnlOpciones.setLayout(new javax.swing.BoxLayout(pnlOpciones, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText("Nombre usuario");
        pnlOpciones.add(jLabel1);

        txtNombreUsuario.setEditable(false);
        pnlOpciones.add(txtNombreUsuario);
        pnlOpciones.add(filler1);

        jLabel2.setText("ID usuario");
        pnlOpciones.add(jLabel2);

        txtIdUsuario.setEditable(false);
        pnlOpciones.add(txtIdUsuario);
        pnlOpciones.add(filler2);

        botonNuevo.setText("Añadir usuario");
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        pnlOpciones.add(botonNuevo);

        botonEliminar.setText("Eliminar");
        botonEliminar.setAlignmentY(1.0F);
        botonEliminar.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        botonEliminar.setPreferredSize(new java.awt.Dimension(100, 23));
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });
        pnlOpciones.add(botonEliminar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(pnlOpciones, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        dialogoCreacion.setVisible(true);
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        String nombreUsuario = txtNombreNuevoUsuario.getText();
        String idUsuario = txtIdNuevoUsuario.getText();
        String relaciones = txtRelacionesNuevoUsuario.getText();
        int[][] relacionesProcesadas = procesarNuevasRelaciones(relaciones);
        Usuario nuevo = new Usuario(Integer.parseInt(idUsuario), "@" + nombreUsuario);
        try {
            redSocial.insertarUsuario(nuevo);
            Node nodo = grafo.addNode(idUsuario);
            nodo.setAttribute("ui.label", nuevo.getNombreUsuario());
            nodo.setAttribute("datosUsuario", nuevo);
            for (int i = 0; i < relacionesProcesadas.length; i++) {
                int[] relacion = relacionesProcesadas[i];
                redSocial.establecerRelacion(nuevo.getId(), relacion[0], relacion[1]);
                grafo.addEdge(idUsuario + "-" + relacion[0], idUsuario, String.valueOf(relacion[0])).setAttribute("ui.label", relacion[1]);
            }
            txtIdNuevoUsuario.setText("");
            txtNombreNuevoUsuario.setText("");
            txtRelacionesNuevoUsuario.setText("");
            dialogoCreacion.dispose();
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "No se pudo insertar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        if (usuarioSeleccionado != null) {
            redSocial.eliminar(usuarioSeleccionado);
            grafo.removeNode(String.valueOf(usuarioSeleccionado.getId()));
        }
        seleccionarUsuario(null);
    }//GEN-LAST:event_botonEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JDialog dialogoCreacion;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel pnlGrafo;
    private javax.swing.JPanel pnlOpciones;
    private javax.swing.JTextField txtIdNuevoUsuario;
    private javax.swing.JTextField txtIdUsuario;
    private javax.swing.JTextField txtNombreNuevoUsuario;
    private javax.swing.JTextField txtNombreUsuario;
    private javax.swing.JTextField txtRelacionesNuevoUsuario;
    // End of variables declaration//GEN-END:variables

    private Graph crearGrafoUI() {
        Graph grafo = new SingleGraph("Red Social", false, true);
        int[][] relaciones = redSocial.getRelaciones();
        Usuario[] usuarios = redSocial.getUsuarios();
        for (int i = 0; i < redSocial.getSize(); i++) {
            int[] fila = relaciones[i];
            Usuario usuarioA = usuarios[i];
            for (int j = i; j < redSocial.getSize(); j++) {
                Usuario usuarioB = usuarios[j];
                int tiempo = relaciones[i][j];
                if (tiempo != 0) {
                    Edge arista = grafo.addEdge(usuarioA.getId() + "-" + usuarioB.getId(), String.valueOf(usuarioA.getId()), String.valueOf(usuarioB.getId()));
                    arista.setAttribute("ui.label", String.valueOf(tiempo));
                }
            }
            Node nodo = grafo.getNode(String.valueOf(usuarioA.getId()));
            if (null != nodo) {
                nodo.setAttribute("ui.label", usuarioA.getNombreUsuario());
                nodo.setAttribute("datosUsuario", usuarioA);
            }
        }
        
        return grafo;
    }

    @Override
    public void viewClosed(String string) {
        loop = false;
    }

    @Override
    public void buttonPushed(String string) {
        
    }

    @Override
    public void buttonReleased(String string) {
        Node nodo = grafo.getNode(string);
        if (nodo != null) {
            Usuario usuario = nodo.getAttribute("datosUsuario", Usuario.class);
            seleccionarUsuario(usuario);
        }
    }

    @Override
    public void mouseOver(String id) {
        Node nodo = grafo.getNode(id);
        nodo.setAttribute("ui.class", "hovered");
    }

    @Override
    public void mouseLeft(String string) {
        Node nodo = grafo.getNode(string);
        nodo.removeAttribute("ui.class");
    }

    private int[][] procesarNuevasRelaciones(String relaciones) {
        String[] listaRelaciones = relaciones.split(",");
        int[][] procesadas = new int[listaRelaciones.length][2];
        String noProcesadas = "";
        for (int i = 0; i < listaRelaciones.length; i++) {
            String rel = listaRelaciones[i];
            String[] componentes = rel.split(":");
            if (componentes.length == 2) {
                try {
                    int id = Integer.parseInt(componentes[0]);
                    int tiempo = Integer.parseInt(componentes[1]);
                    procesadas[i] = new int[] {id, tiempo};
                } catch (NumberFormatException e) {
                    noProcesadas += e.getMessage();
                }
            }
        }
        
        if (!noProcesadas.isBlank()) {
            JOptionPane.showMessageDialog(this, "Ocurrieron los siguientes errores: \n" + noProcesadas + "\nLas relaciones que sí pudieron ser procesadas se agregarán", "Errores al procesar relaciones", JOptionPane.WARNING_MESSAGE);
        }
        
        return procesadas;
    }
    
    private void seleccionarUsuario(Usuario usuario) {
        usuarioSeleccionado = usuario;
        txtIdUsuario.setText(usuario == null ? "" : String.valueOf(usuario.getId()));
        txtNombreUsuario.setText(usuario == null ? "" : usuario.getNombreUsuario());
    }
}
